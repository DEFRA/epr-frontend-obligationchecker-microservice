trigger: none
pr: none
pool: DEFRA-COMMON-ubuntu2004-SSV3

parameters:
  - name: teamName
    displayName: 'Select Team Name:    (works only with "development" as target env)'
    default: 'Team-1_Pi'
    type: string
    values:
      - Team-1_Pi
      - Team-2_Wastebusters
      - Team-3_Recyclers
      - Team-4_QA
      - Team-5_Phoenix
      - Team-6_Stig
      - Team-7_Oscar
      - Team-8_Pre-TST
      - Team-9_Ops
  - name: envToDeploy
    displayName: Env to deploy to
    type: string
    values:
      - development
      - qa-dev4
      - tst
      - preprod
      - prod
    default: development
  - name: imageTag
    displayName: Enter Tag for the Image
    default: ''
    type: string

variables:
  - ${{ if eq(parameters.envToDeploy, 'development') }}:
    - name: env
      value: DEV1
    - template: vars/${{ parameters.teamName }}-${{ parameters.envToDeploy }}.yaml
  - ${{ elseif eq(parameters.envToDeploy, 'qa-dev4') }}:
    - name: env
      value: DEV4
    - template: vars/Team-4_QA-development.yaml
  - ${{ elseif eq(parameters.envToDeploy, 'tst') }}:
    - name: env
      value: TST1
    - template: vars/${{ parameters.envToDeploy }}.yaml
  - ${{ elseif eq(parameters.envToDeploy, 'preprod') }}:
    - name: env
      value: PRE1
    - template: vars/${{ parameters.envToDeploy }}.yaml
  - ${{ elseif eq(parameters.envToDeploy, 'prod') }}:
    - name: env
      value: PRD1
    - template: vars/${{ parameters.envToDeploy }}.yaml

resources:
  repositories:
    - repository: DeployTemplate
      name: RWD-CPR-EPR4P-ADO/epr-webapps-code-deploy-templates
      type: git
      ref: main

stages:
- stage: Validate
  jobs:
  - deployment: 'DeployAppCode'
    environment: $(env)
    strategy:
      runOnce:
        deploy:
          steps:
            - bash: |
                echo "Deploying dockerImage --> "$(acr.repositoryName):${{ parameters.imageTag }} " to env --> "${{ parameters.envToDeploy }}
              displayName: "Show Env Details"

            # - ${{ if ne(parameters.envToDeploy, 'development') }}:
            - ${{ if or(eq(variables['env'], 'TST1'), eq(variables['env'], 'PRE1'), eq(variables['env'], 'PRD1') ) }}:
              # Obtain Docker Password
              - task: AzureKeyVault@2
                displayName: 'Obtain Docker Password'
                inputs:
                  azureSubscription: 'AZD-RWD-DEV1'
                  KeyVaultName: 'DEVRWDINFKV1401'
                  SecretsFilter: 'DockerPassword'
                  RunAsPreJob: true

              # Copy the image from Dev ACR (release candidate) to Target ACR
              - task: AzureCLI@2
                displayName: 'Copy Image to ${{ parameters.envToDeploy }}'
                inputs:
                  azureSubscription: $(azureSubscription)
                  scriptType: 'pscore'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    az acr login --name $(acr.azureContainerRegistryName)
                    az acr import --name $(acr.azureContainerRegistryName) --source devrwdinfac1401.azurecr.io/obligationregistry:${{ parameters.imageTag }} --image obligationregistry:${{ parameters.imageTag }} --username devrwdinfac1401 --password $(DockerPassword) --force


            - task: AzureRmWebAppDeployment@4
              displayName: 'Deploy code to $(serviceName)'
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: $(azureSubscription)
                appType: 'webAppContainer'
                WebAppName: $(serviceName)
                DockerNamespace: '$(acr.azureContainerRegistryName).azurecr.io'
                DockerRepository: $(acr.repositoryName)
                DockerImageTag: ${{ parameters.imageTag }}

